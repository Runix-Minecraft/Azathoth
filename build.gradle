buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    ext.sha = proc.text.trim()
}

task gitBranch {
    def cmd = "git rev-parse --abbrev-ref HEAD"
    def proc = cmd.execute()
    ext.branch = proc.text.trim()
}

def ENV = System.getenv()
if (ENV.BUILD_ID) {
    version = "${config.mc_version}-${config.mod_version}.${project.buildInfo.sha}.${config.release_status}" 
} else {
    version = "${config.mc_version}-${config.mod_version}.local.${project.buildInfo.sha}.${config.release_status}"
}

group= "${config.group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.name}"

sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "${config.mc_version}-${config.forge_version}"

    replaceIn "internal/Reference.java"
    replace '@VERSION@', "${config.mc_version}-${config.mod_version}"
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
                
        // replace version and mcversion
        expand 'mod_version':project.version, 'minecraft_version':project.minecraft.version
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }

    task deobfJar(type: Jar) {
        from sourceSets.main.output
        from sourceSets.main.allSource
        classifier = 'DEV'
    }

    artifacts {
        archives deobfJar
    }
}
